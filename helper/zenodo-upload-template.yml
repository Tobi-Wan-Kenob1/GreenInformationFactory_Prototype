name: "Upload release payload to Zenodo"

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Zenodo title"
        required: true
        default: "__TITLE__"
      description:
        description: "Zenodo description"
        required: true
        default: "__DESCRIPTION__"
      community:
        description: "Zenodo community identifier"
        required: true
        default: "__COMMUNITY__"
      creator:
        description: 'Creator (Surname, Name)'
        required: true
        default: "__CREATOR__"
      affiliation:
        description: "Affiliation"
        required: true
        default: "__AFFILIATION__"
      orcid:
        description: "ORCID (leave empty if none)"
        required: false
        default: "__ORCID__"
      keyword1:
        description: "Keyword 1"
        required: true
        default: "__KW1__"
      keyword2:
        description: "Keyword 2"
        required: true
        default: "__KW2__"
      keyword3:
        description: "Keyword 3"
        required: true
        default: "__KW3__"
      license_id:
        description: "License identifier"
        required: true
        default: "__LICENSE__"
  push:
    tags:
      - "zenodo-*"

jobs:
  upload:
    runs-on: ubuntu-latest
    env:
      PAYLOAD_DIR: notebooks/release_payload
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Ensure jq is available
        run: |
          if ! command -v jq >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y jq
          fi

      - name: Verify payload directory and list files
        run: |
          echo "Using payload dir: ${PAYLOAD_DIR}"
          if [ ! -d "${PAYLOAD_DIR}" ]; then
            echo "::error ::Payload directory '${PAYLOAD_DIR}' does not exist at repo root."
            echo "Tip: Ensure your files live under '${PAYLOAD_DIR}' and are committed to the branch you're running."
            exit 1
          fi
          file_count=$(find "${PAYLOAD_DIR}" -maxdepth 1 -type f | wc -l | tr -d ' ')
          if [ "${file_count}" = "0" ]; then
            echo "::error ::No files found in '${PAYLOAD_DIR}'. Place your CSVs/model/plots there and commit."
            exit 1
          fi
          echo "Found ${file_count} file(s) in ${PAYLOAD_DIR}:"
          ls -lah "${PAYLOAD_DIR}"

      - name: Create deposition
        id: dep
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          META=$(jq -n \
            --arg title "${{ github.event.inputs.title }}" \
            --arg desc  "${{ github.event.inputs.description }}" \
            --arg comm  "${{ github.event.inputs.community }}" \
            --arg creator "${{ github.event.inputs.creator }}" \
            --arg affil   "${{ github.event.inputs.affiliation }}" \
            --arg orcid   "${{ github.event.inputs.orcid }}" \
            --arg kw1     "${{ github.event.inputs.keyword1 }}" \
            --arg kw2     "${{ github.event.inputs.keyword2 }}" \
            --arg kw3     "${{ github.event.inputs.keyword3 }}" \
            --arg lic     "${{ github.event.inputs.license_id }}" \
            '{
               metadata: {
                 title: $title,
                 upload_type: "dataset",
                 description: $desc,
                 creators: (
                   if ($orcid | length) > 0 then
                     [{name:$creator, affiliation:$affil, orcid:$orcid}]
                   else
                     [{name:$creator, affiliation:$affil}]
                   end
                 ),
                 communities: [{identifier:$comm}],
                 keywords: [$kw1, $kw2, $kw3],
                 related_identifiers: [
                   {identifier:"10.5281/zenodo.16256961", relation:"isDerivedFrom", scheme:"doi"}
                 ],
                 access_right: "open",
                 license: $lic
               }
             }')

          echo "Creating deposition on Zenodo…"
          RES=$(curl -sS -X POST "https://zenodo.org/api/deposit/depositions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ZENODO_TOKEN" \
              -d "$META")
          echo "$RES" > dep.json

          dep_id=$(jq -r '.id // empty' dep.json)
          bucket=$(jq -r '.links.bucket // empty' dep.json)
          html=$(jq -r '.links.html // empty' dep.json)

          if [ -z "$dep_id" ] || [ -z "$bucket" ]; then
            echo "::error ::Failed to create deposition. Response:"
            cat dep.json
            exit 1
          fi

          echo "id=$dep_id" >> $GITHUB_OUTPUT
          echo "bucket=$bucket" >> $GITHUB_OUTPUT
          echo "html=$html" >> $GITHUB_OUTPUT

      - name: Upload files to bucket
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          set -euo pipefail
          echo "Uploading files from ${PAYLOAD_DIR}…"
          while IFS= read -r -d '' f; do
            base=$(basename "$f")
            echo "Uploading: $base"
            curl -sS --fail -H "Authorization: Bearer $ZENODO_TOKEN" \
                 --upload-file "$f" "${{ steps.dep.outputs.bucket }}/$base"
          done < <(find "${PAYLOAD_DIR}" -maxdepth 1 -type f -print0)
          echo "All files uploaded."

      - name: Publish deposition
        id: publish
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          echo "Publishing deposition ${{ steps.dep.outputs.id }}…"
          RES=$(curl -sS -X POST "https://zenodo.org/api/deposit/depositions/${{ steps.dep.outputs.id }}/actions/publish" \
                 -H "Authorization: Bearer $ZENODO_TOKEN")
          echo "$RES" > pub.json

          doi=$(jq -r '.metadata.doi // empty' pub.json)
          record=$(jq -r '.links.record_html // empty' pub.json)

          if [ -z "$doi" ] || [ -z "$record" ]; then
            echo "::error ::Publish step failed. Response:"
            cat pub.json
            exit 1
          fi

          echo "doi=$doi" >> $GITHUB_OUTPUT
          echo "record=$record" >> $GITHUB_OUTPUT

      - name: Output links
        run: |
          echo "Record: ${{ steps.publish.outputs.record }}"
          echo "DOI:    ${{ steps.publish.outputs.doi }}"
