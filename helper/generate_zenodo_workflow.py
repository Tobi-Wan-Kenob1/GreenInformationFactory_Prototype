#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Generate an interactive GitHub Actions workflow to upload files in release_payload/ to Zenodo.
- Prompts for: title, description, community (default: biofairnet), creator, affiliation, ORCID, 3 keywords, license (default: MIT)
- Safety check: asks before overwriting an existing .github/workflows/zenodo-upload.yml
- Can run non-interactively with CLI flags (see --help)

Usage examples:
  Interactive (recommended first run):
    python ../helper/generate_zenodo_workflow.py

  Non-interactive:
    python ../helper/generate_zenodo_workflow.py \
      --title "GIF – Processed Data" \
      --description "Train/test splits, model & plots" \
      --community biofairnet \
      --creator "Rosnitschek, Tobias" \
      --affiliation "University of Bayreuth" \
      --keyword FAIR --keyword "machine learning" --keyword "circular economy" \
      --license MIT \
      --force
"""

from pathlib import Path
import argparse
import sys
import shlex
import subprocess

DEFAULTS = {
    "title": "GreenInformationFactory – Processed Data, Model & Performance",
    "description": "Train/test splits, trained model, and evaluation figure generated by the GreenInformationFactory pipeline. Raw data: 10.5281/zenodo.16256961.",
    "community": "biofairnet",
    "creator": "Rosnitschek, Tobias",
    "affiliation": "University of Bayreuth",
    "orcid": "",
    "keywords": ["FAIR", "machine learning", "circular economy"],
    "license": "MIT",
}

WORKFLOW_TEMPLATE = r"""
name: Upload release payload to Zenodo

on:
  workflow_dispatch:
    inputs:
      title:
        description: "Zenodo title"
        required: true
        default: "__TITLE__"
      description:
        description: "Zenodo description"
        required: true
        default: "__DESCRIPTION__"
      community:
        description: "Zenodo community identifier"
        required: true
        default: "__COMMUNITY__"
  push:
    tags:
      - "zenodo-*"

jobs:
  upload:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: List payload
        run: |
          ls -lah release_payload || (echo "release_payload not found" && exit 1)

      - name: Create deposition
        id: dep
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          META=$(jq -n \
            --arg title "${{ github.event.inputs.title }}" \
            --arg desc  "${{ github.event.inputs.description }}" \
            --arg comm  "${{ github.event.inputs.community }}" \
            --arg creator "__CREATOR__" \
            --arg affil   "__AFFILIATION__" \
            --arg orcid   "__ORCID__" \
            --arg kw1     "__KW1__" \
            --arg kw2     "__KW2__" \
            --arg kw3     "__KW3__" \
            --arg lic     "__LICENSE__" \
            '{
               metadata: {
                 title: $title,
                 upload_type: "dataset",
                 description: $desc,
                 creators: (
                   if ($orcid | length) > 0 then
                     [{name:$creator, affiliation:$affil, orcid:$orcid}]
                   else
                     [{name:$creator, affiliation:$affil}]
                   end
                 ),
                 communities: [{identifier:$comm}],
                 keywords: [$kw1, $kw2, $kw3],
                 related_identifiers: [
                   {identifier:"10.5281/zenodo.16256961", relation:"isDerivedFrom", scheme:"doi"}
                 ],
                 access_right: "open",
                 license: $lic
               }
             }')
          RES=$(curl -sS -X POST "https://zenodo.org/api/deposit/depositions" \
              -H "Content-Type: application/json" \
              -H "Authorization: Bearer $ZENODO_TOKEN" \
              -d "$META")
          echo "$RES" > dep.json
          echo "id=$(jq -r '.id' dep.json)" >> $GITHUB_OUTPUT
          echo "bucket=$(jq -r '.links.bucket' dep.json)" >> $GITHUB_OUTPUT
          echo "html=$(jq -r '.links.html' dep.json)" >> $GITHUB_OUTPUT
          test "$(jq -r '.id' dep.json)" != "null"

      - name: Upload files
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          set -e
          for f in release_payload/*; do
            echo "Uploading $f"
            curl -sS --fail -H "Authorization: Bearer $ZENODO_TOKEN" \
                 --upload-file "$f" "${{ steps.dep.outputs.bucket }}/$(basename "$f")"
          done

      - name: Publish
        id: publish
        env:
          ZENODO_TOKEN: ${{ secrets.ZENODO_TOKEN }}
        run: |
          RES=$(curl -sS -X POST "https://zenodo.org/api/deposit/depositions/${{ steps.dep.outputs.id }}/actions/publish" \
                 -H "Authorization: Bearer $ZENODO_TOKEN")
          echo "$RES" > pub.json
          echo "record=$(jq -r '.links.record_html' pub.json)" >> $GITHUB_OUTPUT
          echo "doi=$(jq -r '.metadata.doi' pub.json)" >> $GITHUB_OUTPUT
          test "$(jq -r '.metadata.doi' pub.json)" != "null"

      - name: Output links
        run: |
          echo "Record: ${{ steps.publish.outputs.record }}"
          echo "DOI:    ${{ steps.publish.outputs.doi }}"
"""

def git_repo_root():
    """Try to find the git repo root; fallback to cwd."""
    try:
        out = subprocess.check_output(shlex.split("git rev-parse --show-toplevel"), stderr=subprocess.DEVNULL)
        return Path(out.decode().strip())
    except Exception:
        return Path.cwd()

def prompt(prompt_text: str, default: str) -> str:
    val = input(f"{prompt_text} [{default}]: ").strip()
    return val or default

def main():
    parser = argparse.ArgumentParser(description="Generate .github/workflows/zenodo-upload.yml (interactive by default).")
    parser.add_argument("--title", help="Zenodo title")
    parser.add_argument("--description", help="Zenodo description")
    parser.add_argument("--community", help="Zenodo community identifier (default: biofairnet)")
    parser.add_argument("--creator", help='Creator "Surname, Name"')
    parser.add_argument("--affiliation", help="Creator affiliation")
    parser.add_argument("--orcid", help="Creator ORCID (0000-0000-0000-0000)")
    parser.add_argument("--keyword", action="append", help="Keyword (use multiple --keyword)")
    parser.add_argument("--license", help="License identifier (e.g., MIT, cc-by-4.0)")
    parser.add_argument("--force", action="store_true", help="Overwrite existing workflow without prompting")
    parser.add_argument("--non-interactive", action="store_true", help="Do not prompt; use provided args or defaults")

    args = parser.parse_args()

    # Merge args with defaults & prompts
    title = args.title or (DEFAULTS["title"] if args.non_interactive else prompt("Zenodo Title", DEFAULTS["title"]))
    description = args.description or (DEFAULTS["description"] if args.non_interactive else prompt("Zenodo Description", DEFAULTS["description"]))
    community = args.community or (DEFAULTS["community"] if args.non_interactive else prompt("Zenodo Community", DEFAULTS["community"]))
    creator = args.creator or (DEFAULTS["creator"] if args.non_interactive else prompt("Creator (Surname, Name)", DEFAULTS["creator"]))
    affiliation = args.affiliation or (DEFAULTS["affiliation"] if args.non_interactive else prompt("Affiliation", DEFAULTS["affiliation"]))
    orcid = args.orcid or (DEFAULTS["orcid"] if args.non_interactive else prompt("ORCID (0000-0000-0000-0000, blank if none)", DEFAULTS["orcid"]))

    if args.keyword:
        keywords = args.keyword
    elif args.non_interactive:
        keywords = DEFAULTS["keywords"]
    else:
        kw1 = prompt("Keyword 1", DEFAULTS["keywords"][0])
        kw2 = prompt("Keyword 2", DEFAULTS["keywords"][1])
        kw3 = prompt("Keyword 3", DEFAULTS["keywords"][2])
        keywords = [kw1, kw2, kw3]

    license_id = args.license or (DEFAULTS["license"] if args.non_interactive else prompt("License identifier", DEFAULTS["license"]))

    # Resolve workflow path (repo root preferred)
    repo_root = git_repo_root()
    wf_dir = repo_root / ".github" / "workflows"
    wf_dir.mkdir(parents=True, exist_ok=True)
    wf_path = wf_dir / "zenodo-upload.yml"

    # Safety check
    if wf_path.exists() and not args.force:
        if args.non_interactive:
            print(f"Refusing to overwrite existing {wf_path}. Use --force to override.", file=sys.stderr)
            sys.exit(1)
        confirm = input(f"⚠️ {wf_path} exists. Overwrite? [y/N]: ").strip().lower()
        if confirm not in ("y", "yes"):
            print("❌ Aborted. Existing workflow left unchanged.")
            print("ℹ️ Edit the .yml directly if you want to change defaults.")
            sys.exit(0)

    # Fill template
    content = WORKFLOW_TEMPLATE
    content = content.replace("__TITLE__", title)\
                     .replace("__DESCRIPTION__", description)\
                     .replace("__COMMUNITY__", community)\
                     .replace("__CREATOR__", creator)\
                     .replace("__AFFILIATION__", affiliation)\
                     .replace("__ORCID__", orcid)\
                     .replace("__KW1__", keywords[0] if len(keywords) > 0 else "")\
                     .replace("__KW2__", keywords[1] if len(keywords) > 1 else "")\
                     .replace("__KW3__", keywords[2] if len(keywords) > 2 else "")\
                     .replace("__LICENSE__", license_id)

    wf_path.write_text(content, encoding="utf-8")

    print(f"✅ Workflow written to: {wf_path}")
    print("⚠️ Reminder: The defaults embedded in the .yml will be used for manual runs via Actions → Run workflow.")
    print("   To change them later without prompts, edit the .yml directly or re-run this script with --non-interactive/--force.")
    print("\nNext steps:")
    print("  1) Ensure your files are in release_payload/ and pushed to GitHub.")
    print("  2) Add repo secret ZENODO_TOKEN (GitHub → Settings → Secrets and variables → Actions).")
    print("  3) Trigger the workflow via Actions → Run workflow, or push a tag like: zenodo-YYYYMMDD-HHMM.")

if __name__ == "__main__":
    main()